// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//ユーザ認証（nextauth.js)

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  registrasion_date DateTime @default(now())
  post          Post[]
  comment       Comment[]
  role    Role     @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//掲示板機能

model Post {
  post_id    Int       @id @default(autoincrement())
  user_id    String
  title      String
  content    String
  post_date  DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  Comment   Comment[]
  categories CategoriesOnPosts[]
}

model Comment {
  comment_id      Int       @id @default(autoincrement())
  user_id         String
  post_id         Int
  comment_content String
  comment_value   Int
  comment_date    DateTime @default(now())
  user            User     @relation(fields: [user_id], references: [id])
  post            Post     @relation(fields: [post_id], references: [post_id])
}

model Category {
  category_id    Int     @id @default(autoincrement())
  categoryname   String
  posts CategoriesOnPosts[]
}

model CategoriesOnPosts {
  post       Post     @relation(fields: [post_id], references: [post_id])
  post_id     Int
  category   Category @relation(fields: [category_id], references: [category_id])
  category_id Int
  category_date DateTime @default(now())
  @@id([post_id, category_id])
}

//ロール追加
enum Role {
  USER
  ADMIN
}